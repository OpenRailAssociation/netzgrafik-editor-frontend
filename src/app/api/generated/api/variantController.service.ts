/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from "@angular/core";
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
} from "@angular/common/http";
import {CustomHttpParameterCodec} from "../encoder";
import {Observable} from "rxjs";

import {VariantCreateDto} from "../model/models";
import {VariantCreateFromVersionDto} from "../model/models";
import {VariantDto} from "../model/models";

import {BASE_PATH, COLLECTION_FORMATS} from "../variables";
import {Configuration} from "../configuration";
import {VariantControllerBackendServiceInterface} from "./variantController.serviceInterface";

@Injectable({
  providedIn: "root",
})
export class VariantControllerBackendService
  implements VariantControllerBackendServiceInterface
{
  protected basePath = "http://localhost:8080";
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string,
  ): HttpParams {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string,
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === "object") {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)),
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10),
          );
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k,
            )),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }

  /**
   * @param variantId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public archiveVariant(
    variantId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<any>;
  public archiveVariant(
    variantId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<HttpResponse<any>>;
  public archiveVariant(
    variantId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<HttpEvent<any>>;
  public archiveVariant(
    variantId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<any> {
    if (variantId === null || variantId === undefined) {
      throw new Error(
        "Required parameter variantId was null or undefined when calling archiveVariant.",
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (OAuth) required
    credential = this.configuration.lookupCredential("OAuth");
    if (credential) {
      headers = headers.set("Authorization", "Bearer " + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    let responseType: "text" | "json" = "json";
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith("text")
    ) {
      responseType = "text";
    }

    return this.httpClient.put<any>(
      `${this.configuration.basePath}/v1/variants/${encodeURIComponent(String(variantId))}/archive`,
      null,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param projectId
   * @param variantCreateDto
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createVariant(
    projectId: number,
    variantCreateDto: VariantCreateDto,
    observe?: "body",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<number>;
  public createVariant(
    projectId: number,
    variantCreateDto: VariantCreateDto,
    observe?: "response",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<HttpResponse<number>>;
  public createVariant(
    projectId: number,
    variantCreateDto: VariantCreateDto,
    observe?: "events",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<HttpEvent<number>>;
  public createVariant(
    projectId: number,
    variantCreateDto: VariantCreateDto,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<any> {
    if (projectId === null || projectId === undefined) {
      throw new Error(
        "Required parameter projectId was null or undefined when calling createVariant.",
      );
    }
    if (variantCreateDto === null || variantCreateDto === undefined) {
      throw new Error(
        "Required parameter variantCreateDto was null or undefined when calling createVariant.",
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (OAuth) required
    credential = this.configuration.lookupCredential("OAuth");
    if (credential) {
      headers = headers.set("Authorization", "Bearer " + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    let responseType: "text" | "json" = "json";
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith("text")
    ) {
      responseType = "text";
    }

    return this.httpClient.post<number>(
      `${this.configuration.basePath}/v1/projects/${encodeURIComponent(String(projectId))}/variants`,
      variantCreateDto,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param versionId
   * @param variantCreateFromVersionDto
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createVariantFromVersion(
    versionId: number,
    variantCreateFromVersionDto: VariantCreateFromVersionDto,
    observe?: "body",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<number>;
  public createVariantFromVersion(
    versionId: number,
    variantCreateFromVersionDto: VariantCreateFromVersionDto,
    observe?: "response",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<HttpResponse<number>>;
  public createVariantFromVersion(
    versionId: number,
    variantCreateFromVersionDto: VariantCreateFromVersionDto,
    observe?: "events",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<HttpEvent<number>>;
  public createVariantFromVersion(
    versionId: number,
    variantCreateFromVersionDto: VariantCreateFromVersionDto,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<any> {
    if (versionId === null || versionId === undefined) {
      throw new Error(
        "Required parameter versionId was null or undefined when calling createVariantFromVersion.",
      );
    }
    if (
      variantCreateFromVersionDto === null ||
      variantCreateFromVersionDto === undefined
    ) {
      throw new Error(
        "Required parameter variantCreateFromVersionDto was null or undefined when calling createVariantFromVersion.",
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (OAuth) required
    credential = this.configuration.lookupCredential("OAuth");
    if (credential) {
      headers = headers.set("Authorization", "Bearer " + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    let responseType: "text" | "json" = "json";
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith("text")
    ) {
      responseType = "text";
    }

    return this.httpClient.post<number>(
      `${this.configuration.basePath}/v1/versions/${encodeURIComponent(String(versionId))}/variant/new`,
      variantCreateFromVersionDto,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param variantId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteVariant(
    variantId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<string>;
  public deleteVariant(
    variantId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<HttpResponse<string>>;
  public deleteVariant(
    variantId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<HttpEvent<string>>;
  public deleteVariant(
    variantId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<any> {
    if (variantId === null || variantId === undefined) {
      throw new Error(
        "Required parameter variantId was null or undefined when calling deleteVariant.",
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (OAuth) required
    credential = this.configuration.lookupCredential("OAuth");
    if (credential) {
      headers = headers.set("Authorization", "Bearer " + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    let responseType: "text" | "json" = "json";
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith("text")
    ) {
      responseType = "text";
    }

    return this.httpClient.delete<string>(
      `${this.configuration.basePath}/v1/variants/${encodeURIComponent(String(variantId))}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param variantId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public dropSnapshots(
    variantId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<any>;
  public dropSnapshots(
    variantId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<HttpResponse<any>>;
  public dropSnapshots(
    variantId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<HttpEvent<any>>;
  public dropSnapshots(
    variantId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<any> {
    if (variantId === null || variantId === undefined) {
      throw new Error(
        "Required parameter variantId was null or undefined when calling dropSnapshots.",
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (OAuth) required
    credential = this.configuration.lookupCredential("OAuth");
    if (credential) {
      headers = headers.set("Authorization", "Bearer " + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    let responseType: "text" | "json" = "json";
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith("text")
    ) {
      responseType = "text";
    }

    return this.httpClient.delete<any>(
      `${this.configuration.basePath}/v1/variants/${encodeURIComponent(String(variantId))}/snapshots`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param variantId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getVariant(
    variantId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<VariantDto>;
  public getVariant(
    variantId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<HttpResponse<VariantDto>>;
  public getVariant(
    variantId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<HttpEvent<VariantDto>>;
  public getVariant(
    variantId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: {httpHeaderAccept?: "application/json"},
  ): Observable<any> {
    if (variantId === null || variantId === undefined) {
      throw new Error(
        "Required parameter variantId was null or undefined when calling getVariant.",
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (OAuth) required
    credential = this.configuration.lookupCredential("OAuth");
    if (credential) {
      headers = headers.set("Authorization", "Bearer " + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    let responseType: "text" | "json" = "json";
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith("text")
    ) {
      responseType = "text";
    }

    return this.httpClient.get<VariantDto>(
      `${this.configuration.basePath}/v1/variants/${encodeURIComponent(String(variantId))}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param variantId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public raiseSnapshotsToNewestReleaseVersion(
    variantId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<any>;
  public raiseSnapshotsToNewestReleaseVersion(
    variantId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<HttpResponse<any>>;
  public raiseSnapshotsToNewestReleaseVersion(
    variantId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<HttpEvent<any>>;
  public raiseSnapshotsToNewestReleaseVersion(
    variantId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<any> {
    if (variantId === null || variantId === undefined) {
      throw new Error(
        "Required parameter variantId was null or undefined when calling raiseSnapshotsToNewestReleaseVersion.",
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (OAuth) required
    credential = this.configuration.lookupCredential("OAuth");
    if (credential) {
      headers = headers.set("Authorization", "Bearer " + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    let responseType: "text" | "json" = "json";
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith("text")
    ) {
      responseType = "text";
    }

    return this.httpClient.put<any>(
      `${this.configuration.basePath}/v1/variants/${encodeURIComponent(String(variantId))}/snapshots/asNewest`,
      null,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param variantId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public unarchiveVariant(
    variantId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<any>;
  public unarchiveVariant(
    variantId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<HttpResponse<any>>;
  public unarchiveVariant(
    variantId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<HttpEvent<any>>;
  public unarchiveVariant(
    variantId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: {httpHeaderAccept?: undefined},
  ): Observable<any> {
    if (variantId === null || variantId === undefined) {
      throw new Error(
        "Required parameter variantId was null or undefined when calling unarchiveVariant.",
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (OAuth) required
    credential = this.configuration.lookupCredential("OAuth");
    if (credential) {
      headers = headers.set("Authorization", "Bearer " + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    let responseType: "text" | "json" = "json";
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith("text")
    ) {
      responseType = "text";
    }

    return this.httpClient.put<any>(
      `${this.configuration.basePath}/v1/variants/${encodeURIComponent(String(variantId))}/unarchive`,
      null,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }
}
